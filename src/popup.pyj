from elementmaker import E
from settings import options_list, character_settings, createHTMLOption, createHTMLOptionEx, \
    initializeSettings, saveSettings, setCurrentTab, loadSettings
from constants import ROLL20_URL, DNDBEYOND_CHARACTER_URL, DNDBEYOND_MONSTER_URL, DNDBEYOND_ENCOUNTER_URL, DNDBEYOND_VEHICLE_URL
from utils import isFVTT, urlMatches

character = None
settings = None
def gotSettings(stored_settings):
    nonlocal settings
    settings = stored_settings
    $("ul").removeClass("disabled")

def createOptionList():
    options = []
    for option in options_list:
        child = createHTMLOption(option, True)
        if child:
            options.append(child)
    $("main").prepend(E.ul(class_="list-group beyond20-options", *options))
    $(".beyond20-options").append(E.li(class_="list-group-item beyond20-option",
                                       E.a(id="openOptions", class_="list-content", href='#',
                                           E.h4("More Options")
                                           )
                                       )
                                  )
    img = $("#donate").find("img")
    img.attr("src", img.attr("src").replace("donate.png", "donate32.png"))
    $("#openOptions").on('click', def (ev):
        chrome.runtime.openOptionsPage()
    )
def canAlertify(tab_id):
    $("#openOptions").off('click').on('click', def (ev):
        chrome.tabs.sendMessage(tab_id, {"action": "open-options"})
        window.close()
    )

def save_settings():
    nonlocal character
    saveSettings(def(settings):
                     chrome.runtime.sendMessage({"action": "settings", "type": "general", "settings": settings})
                 )
    if character is not None:
        saveSettings(def(settings):
                         chrome.runtime.sendMessage({"action": "settings", "type": "character", "id": character.id, "settings": settings})
                     , "character-" + character.id, character_settings)

def setupHTML():
    createOptionList()
    $('.beyond20-option-input').change(save_settings)
    $(".beyond20-options").on("markaChanged", save_settings)
    $(document).on('click', 'a', def(ev):
        href = this.getAttribute('href')
        if len(href) > 0 and href != "#":
            window.open(this.href)
        return False
    )
    $("ul").addClass("disabled")

def populateCharacter(response):
    nonlocal character
    character = response
    if response?:
        console.log("Received character: ", response)
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", id="character-option", style="text-align: center; padding: 10px 15px;",
                            E.h4(" == Character Specific Options ==", style="margin: 0px;"),
                            E.p(response.name, style="margin: 0px;"))
                       )

        e = createHTMLOption("versatile-choice", False, character_settings)
        options.append(e)
        e = createHTMLOption("custom-roll-dice", False, character_settings)
        options.append(e)
        e = createHTMLOption("custom-damage-dice", False, character_settings)
        options.append(e)
        if "Rogue" in response.classes:
            e = createHTMLOption("rogue-sneak-attack", False, character_settings)
            options.append(e)
        if "Disciple of Life" in response["class-features"]:
            e = createHTMLOption("cleric-disciple-life", False, character_settings)
            options.append(e)
        if "Bard" in response.classes:
            e = createHTMLOption("bard-joat", False, character_settings)
            options.append(e)
        if "Sharpshooter" in response["feats"]:
            e = createHTMLOption("sharpshooter", False, character_settings)
            options.append(e)
        if "Great Weapon Master" in response["feats"]:
            e = createHTMLOption("great-weapon-master", False, character_settings)
            options.append(e)
        if "Brutal Critical" in response["class-features"] or \
                "Savage Attacks" in response["racial-traits"]:
            e = createHTMLOption("brutal-critical", False, character_settings)
            options.append(e)
        if "Rage" in response["class-features"]:
            e = createHTMLOption("barbarian-rage", False, character_settings)
            options.append(e)
        if "Crimson Rite" in response["class-features"]:
            e = createHTMLOption("bloodhunter-crimson-rite", False, character_settings)
            options.append(e)
        if "Dread Ambusher" in response["class-features"]:
            e = createHTMLOption("ranger-dread-ambusher", False, character_settings)
            options.append(e)
        if "Channel Divinity: Legendary Strike" in response["actions"]:
            e = createHTMLOption("paladin-legendary-strike", False, character_settings)
            options.append(e)
        if "Improved Divine Smite" in response["class-features"]:
            e = createHTMLOption("paladin-improved-divine-smite", False, character_settings)
            options.append(e)
        if "Hexbladeâ€™s Curse" in response["class-features"]:
            e = createHTMLOption("warlock-hexblade-curse", False, character_settings)
            options.append(e)
        if "Assassinate" in response["class-features"]:
            e = createHTMLOption("rogue-assassinate", False, character_settings)
            options.append(e)

        loadSettings(response.settings, character_settings)
    $('.beyond20-option-input').off('change', save_settings)
    $('.beyond20-option-input').change(save_settings)
    initializeSettings(gotSettings)

def addMonsterOptions():
    option = options_list["whisper-type-monsters"]
    option["short"] = "Whisper monster rolls"
    e = createHTMLOptionEx("whisper-type-monsters", option, True)
    $(e).insertAfter($("#whisper-type").parents("li"))
    options = $(".beyond20-options")
    options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; padding: 10px;",
                        E.h4(" == Stat Block Specific Options =="))
                )

    e = createHTMLOption("subst-dndbeyond-stat-blocks", False)
    options.append(e)
    e = createHTMLOption("handle-stat-blocks", False)
    options.append(e)
    $('.beyond20-option-input').off('change', save_settings)
    $('.beyond20-option-input').change(save_settings)
    initializeSettings(gotSettings)

def tabMatches(tab, url):
    return tab.url.match(url.replace(/\*/g, "[^]*")) != None

def actOnCurrentTab(tabs):
    setCurrentTab(tabs[0])
    if urlMatches(tabs[0].url, ROLL20_URL) or isFVTT(tabs[0].title):
        vtt = "Foundry VTT" if isFVTT(tabs[0].title) else "Roll20"
        options = $(".beyond20-options")
        options.append(E.li(class_="list-group-item beyond20-option", style="text-align: center; margin: 10px;",
                                           E.h4(" == " + vtt + " Tab Specific Options ==")
                                           ))
        if vtt == "Roll20":
            e = createHTMLOption("roll20-template", False)
            options.append(e)
            options.append(E.li(class_="list-group-item beyond20-option beyond20-option-button",
                E.label(class_="list-content", for_="dice_roll",
                    E.h4(class_="trigger", "Roll Dice"),
                    E.p(class_="trigger", "Take a chance, roll the dice."),
                    E.div(class_="image-link trigger",
                        E.img(class_="link-image", src="images/dice32.png")
                    )
                )
            ))
        e = createHTMLOption("display-conditions", False)
        options.append(e)
        e = options_list["vtt-tab"].createHTMLElement("vtt-tab", True)
        options.append(e)
        $('.beyond20-option-input').off('change', save_settings)
        $('.beyond20-option-input').change(save_settings)
        initializeSettings(gotSettings)
    elif urlMatches(tabs[0].url, DNDBEYOND_CHARACTER_URL):
        chrome.tabs.sendMessage(tabs[0].id, {"action": "get-character"}, populateCharacter)
    elif urlMatches(tabs[0].url, DNDBEYOND_MONSTER_URL) or urlMatches(tabs[0].url, DNDBEYOND_VEHICLE_URL) or urlMatches(tabs[0].url, DNDBEYOND_ENCOUNTER_URL):
        addMonsterOptions()
    else:
        initializeSettings(gotSettings)
    canAlertify(tabs[0].id)


setupHTML()
chrome.tabs.query({"active": True, "currentWindow": True}, actOnCurrentTab)
